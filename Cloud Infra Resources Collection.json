{
	"info": {
		"_postman_id": "a2248035-c744-49b3-9153-53bb9bd8f4a3",
		"name": "Cloud Infra Resources",
		"description": "This collection provides a comprehensive set of CRUD operations for managing AWS Cloud Infrastructure resources including EC2 instances (servers), RDS databases, S3 storage buckets, and VPC networking components. All requests use AWS Signature Version 4 authentication, with AWS credentials securely referenced via local vault variables: {{vault:TALIA-AWS-ACCESS-KEY}} and {{vault:TALIA-AWS-SECRET-KEY}}. Variables such as baseUrl, region, and bucketName are defined at the collection level for flexible configuration. Use this collection to automate and manage your cloud infrastructure resources efficiently within Postman.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37578199",
		"_collection_link": "https://devrel.postman.co/workspace/Cloud-Infrastructure-Resources~5d076a20-4bfa-44c7-8ec9-18bf23b14a32/collection/21505573-a2248035-c744-49b3-9153-53bb9bd8f4a3?action=share&source=collection_link&creator=37578199"
	},
	"item": [
		{
			"name": "Servers (EC2 instances)",
			"item": [
				{
					"name": "Launch a new EC2 instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse XML response and extract InstanceId, then set as {{id}} variable",
									"var jsonObject = xml2Json(responseBody);",
									"",
									"// Typical EC2 RunInstances response structure:",
									"// <RunInstancesResponse>",
									"//   <instancesSet>",
									"//     <item>",
									"//       <instanceId>i-1234567890abcdef0</instanceId>",
									"//     </item>",
									"//   </instancesSet>",
									"// </RunInstancesResponse>",
									"",
									"var instanceId;",
									"try {",
									"    var items = jsonObject.RunInstancesResponse && jsonObject.RunInstancesResponse.instancesSet && jsonObject.RunInstancesResponse.instancesSet.item;",
									"    if (Array.isArray(items)) {",
									"        // If multiple instances launched, take the first one",
									"        instanceId = items[0].instanceId;",
									"    } else if (items && items.instanceId) {",
									"        // Single instance launched",
									"        instanceId = items.instanceId;",
									"    }",
									"    ",
									"    pm.test(\"InstanceId is present in response\", function () {",
									"        pm.expect(instanceId).to.be.a(\"string\");",
									"        pm.expect(instanceId.length).to.be.greaterThan(0);",
									"    });",
									"    ",
									"    // Set variable in environment if available, else as global",
									"    if (pm.environment.name) {",
									"        pm.environment.set(\"id\", instanceId);",
									"    } else {",
									"        pm.globals.set(\"id\", instanceId);",
									"    }",
									"} catch (e) {",
									"    pm.test(\"Failed to extract InstanceId\", function () {",
									"        pm.expect.fail(\"Could not extract InstanceId from response: \" + e.message);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "service",
									"value": "ec2",
									"type": "string"
								},
								{
									"key": "region",
									"value": "{{region}}",
									"type": "string"
								},
								{
									"key": "secretKey",
									"value": "{{vault:AWS-SECRET-KEY}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{vault:AWS-ACCESS-KEY}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "Action",
									"value": "RunInstances",
									"type": "text"
								},
								{
									"key": "Version",
									"value": "2016-11-15",
									"type": "text"
								},
								{
									"key": "ImageId",
									"value": "ami-0c02fb55956c7d316",
									"type": "text"
								},
								{
									"key": "InstanceType",
									"value": "t2.micro",
									"type": "text"
								},
								{
									"key": "MinCount",
									"value": "1",
									"type": "text"
								},
								{
									"key": "MaxCount",
									"value": "1",
									"type": "text"
								},
								{
									"key": "SubnetId",
									"value": "subnet-09b6b4a2e38c96854",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://ec2.us-east-1.amazonaws.com",
							"protocol": "https",
							"host": [
								"ec2",
								"us-east-1",
								"amazonaws",
								"com"
							]
						}
					},
					"response": [
						{
							"name": "Instance launched",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"imageId\": \"ami-12345678\",\n  \"instanceType\": \"t2.micro\",\n  \"keyName\": \"my-keypair\",\n  \"minCount\": 1,\n  \"maxCount\": 1\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/servers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"servers"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"instanceId\": \"i-1234567890abcdef0\",\n  \"instanceType\": \"t2.micro\",\n  \"state\": \"running\"\n}"
						}
					]
				},
				{
					"name": "Describe EC2 Instance",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://ec2.us-east-1.amazonaws.com?Action=DescribeInstances&InstanceId={{id}}&Version=2016-11-15",
							"protocol": "https",
							"host": [
								"ec2",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"query": [
								{
									"key": "Action",
									"value": "DescribeInstances"
								},
								{
									"key": "InstanceId",
									"value": "{{id}}"
								},
								{
									"key": "Version",
									"value": "2016-11-15"
								}
							]
						}
					},
					"response": [
						{
							"name": "Instance details",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/servers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"servers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"instanceId\": \"i-1234567890abcdef0\",\n  \"instanceType\": \"t2.micro\",\n  \"state\": \"running\"\n}"
						}
					]
				},
				{
					"name": "Terminate EC2 Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse XML response to JSON",
									"var jsonObject = xml2Json(responseBody);",
									"",
									"pm.test(\"Response contains instancesSet with at least one item\", function () {",
									"    pm.expect(jsonObject).to.have.property('TerminateInstancesResponse');",
									"    pm.expect(jsonObject.TerminateInstancesResponse).to.have.property('instancesSet');",
									"    var items = jsonObject.TerminateInstancesResponse.instancesSet.item;",
									"    // items can be an array or a single object",
									"    if (!Array.isArray(items)) {",
									"        items = [items];",
									"    }",
									"    pm.expect(items.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"instancesSet contains requested InstanceId\", function () {",
									"    var requestedId = pm.variables.get(\"id\");",
									"    var items = jsonObject.TerminateInstancesResponse.instancesSet.item;",
									"    if (!Array.isArray(items)) {",
									"        items = [items];",
									"    }",
									"    var instanceIds = items.map(function(i){ return i.instanceId; });",
									"    pm.expect(instanceIds).to.include(requestedId);",
									"});",
									"",
									"pm.test(\"Each item has currentState and previousState\", function () {",
									"    var items = jsonObject.TerminateInstancesResponse.instancesSet.item;",
									"    if (!Array.isArray(items)) {",
									"        items = [items];",
									"    }",
									"    items.forEach(function(i) {",
									"        pm.expect(i).to.have.property('currentState');",
									"        pm.expect(i).to.have.property('previousState');",
									"        pm.expect(i.currentState).to.have.property('code');",
									"        pm.expect(i.currentState).to.have.property('name');",
									"        pm.expect(i.previousState).to.have.property('code');",
									"        pm.expect(i.previousState).to.have.property('name');",
									"    });",
									"});",
									"",
									"// Set indicator variable for successful termination",
									"if (",
									"    pm.response.code === 200 &&",
									"    jsonObject &&",
									"    jsonObject.TerminateInstancesResponse &&",
									"    jsonObject.TerminateInstancesResponse.instancesSet &&",
									"    jsonObject.TerminateInstancesResponse.instancesSet.item",
									") {",
									"    pm.environment.set('ec2_terminated', true);",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "Action",
									"value": "CreateDBInstance",
									"type": "text"
								},
								{
									"key": "DBInstanceIdentifier",
									"value": "mydbinstance12",
									"type": "text"
								},
								{
									"key": "DBInstanceClass",
									"value": "db.t4g.micro",
									"type": "text"
								},
								{
									"key": "Engine",
									"value": "mysql",
									"type": "text"
								},
								{
									"key": "MasterUsername",
									"value": "{{vault:RDS-MASTER-USERNAME}}",
									"type": "text"
								},
								{
									"key": "MasterUserPassword",
									"value": "{{vault:RDS-MASTER-PASSWORD}}",
									"type": "text"
								},
								{
									"key": "AllocatedStorage",
									"value": "20",
									"type": "text"
								},
								{
									"key": "DBSubnetGroupName",
									"value": "{{db_subnet_group}}",
									"type": "text"
								},
								{
									"key": "Version",
									"value": "2014-10-31",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://ec2.us-east-1.amazonaws.com?Action=TerminateInstances&InstanceId={{id}}&Version=2016-11-15",
							"protocol": "https",
							"host": [
								"ec2",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"query": [
								{
									"key": "Action",
									"value": "TerminateInstances"
								},
								{
									"key": "InstanceId",
									"value": "{{id}}"
								},
								{
									"key": "Version",
									"value": "2016-11-15"
								}
							]
						}
					},
					"response": [
						{
							"name": "Instance terminated",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/servers/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"servers",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"description": "This folder contains endpoints for managing AWS EC2 instances (servers). Use these requests to list, launch, describe, and terminate EC2 instances in your AWS account. Each request demonstrates the required parameters and authentication setup using AWS Signature Version 4. Ideal for automating server lifecycle management and scaling operations."
		},
		{
			"name": "Databases (RDS instances)",
			"item": [
				{
					"name": "Create DB instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 201\", function () {",
									"    pm.response.to.be.oneOf([200, 201]);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Response has DBInstanceIdentifier\", function () {",
									"    pm.expect(jsonData).to.have.property('DBInstanceIdentifier');",
									"});",
									"pm.test(\"Response has DBInstanceStatus\", function () {",
									"    pm.expect(jsonData).to.have.property('DBInstanceStatus');",
									"});",
									"pm.test(\"DBInstanceStatus is a string\", function () {",
									"    pm.expect(jsonData.DBInstanceStatus).to.be.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "Action",
									"value": "CreateDBInstance",
									"type": "text"
								},
								{
									"key": "DBInstanceIdentifier",
									"value": "mydbinstance12",
									"type": "text"
								},
								{
									"key": "DBInstanceClass",
									"value": "db.t4g.micro",
									"type": "text"
								},
								{
									"key": "Engine",
									"value": "mysql",
									"type": "text"
								},
								{
									"key": "MasterUsername",
									"value": "{{vault:RDS-MASTER-USERNAME}}",
									"type": "text"
								},
								{
									"key": "MasterUserPassword",
									"value": "{{vault:RDS-MASTER-PASSWORD}}",
									"type": "text"
								},
								{
									"key": "AllocatedStorage",
									"value": "20",
									"type": "text"
								},
								{
									"key": "DBSubnetGroupName",
									"value": "{{db_subnet_group}}",
									"type": "text"
								},
								{
									"key": "Version",
									"value": "2014-10-31",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://rds.{{region}}.amazonaws.com/",
							"protocol": "https",
							"host": [
								"rds",
								"{{region}}",
								"amazonaws",
								"com"
							],
							"path": [
								""
							]
						}
					},
					"response": [
						{
							"name": "DB instance created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"dbInstanceIdentifier\": \"mydb1\",\n  \"dbInstanceClass\": \"db.t3.micro\",\n  \"engine\": \"mysql\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/databases",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"databases"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"dbInstanceIdentifier\": \"mydb1\",\n  \"dbInstanceClass\": \"db.t3.micro\",\n  \"engine\": \"mysql\",\n  \"status\": \"available\"\n}"
						}
					]
				},
				{
					"name": "Describe DB instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Response has DBInstances array\", function () {",
									"    pm.expect(jsonData).to.have.property('DBInstances');",
									"    pm.expect(jsonData.DBInstances).to.be.an('array');",
									"});",
									"",
									"if (jsonData.DBInstances.length > 0) {",
									"    pm.test(\"Each DBInstance has DBInstanceIdentifier and DBInstanceStatus\", function () {",
									"        jsonData.DBInstances.forEach(function(instance) {",
									"            pm.expect(instance).to.have.property('DBInstanceIdentifier');",
									"            pm.expect(instance).to.have.property('DBInstanceStatus');",
									"        });",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/databases/:id?Action=DescribeDBInstances&DBInstanceIdentifier=mydbinstance12&Version=2014-10-31",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"databases",
								":id"
							],
							"query": [
								{
									"key": "Action",
									"value": "DescribeDBInstances"
								},
								{
									"key": "DBInstanceIdentifier",
									"value": "mydbinstance12"
								},
								{
									"key": "Version",
									"value": "2014-10-31"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "string",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "DB instance details",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/databases/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"databases",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"dbInstanceIdentifier\": \"mydb1\",\n  \"dbInstanceClass\": \"db.t3.micro\",\n  \"engine\": \"mysql\",\n  \"status\": \"available\"\n}"
						}
					]
				},
				{
					"name": "Modify DB instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 202\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Response has DBInstanceIdentifier\", function () {",
									"    pm.expect(jsonData).to.have.property('DBInstanceIdentifier');",
									"});",
									"pm.test(\"Response has DBInstanceStatus\", function () {",
									"    pm.expect(jsonData).to.have.property('DBInstanceStatus');",
									"});",
									"pm.test(\"DBInstanceStatus is a string\", function () {",
									"    pm.expect(jsonData.DBInstanceStatus).to.be.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"attribute\": \"dbInstanceClass\",\n  \"value\": \"db.t3.small\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://rds.{{region}}.amazonaws.com/",
							"protocol": "https",
							"host": [
								"rds",
								"{{region}}",
								"amazonaws",
								"com"
							],
							"path": [
								""
							]
						}
					},
					"response": [
						{
							"name": "DB instance modified",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attribute\": \"dbInstanceClass\",\n  \"value\": \"db.t3.small\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/databases/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"databases",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Delete DB instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 202\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Response has DBInstanceIdentifier\", function () {",
									"    pm.expect(jsonData).to.have.property('DBInstanceIdentifier');",
									"});",
									"pm.test(\"Response has DBInstanceStatus\", function () {",
									"    pm.expect(jsonData).to.have.property('DBInstanceStatus');",
									"});",
									"pm.test(\"DBInstanceStatus is 'deleting' or 'deleted'\", function () {",
									"    pm.expect(['deleting', 'deleted']).to.include(jsonData.DBInstanceStatus);",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "MasterUsername",
								"value": "{{vault:RDS-MASTER-USERNAME}}",
								"type": "text"
							},
							{
								"key": "MasterUserPassword",
								"value": "{{vault:RDS-MASTER-PASSWORD}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "Action",
									"value": "DeleteDBInstance",
									"type": "text"
								},
								{
									"key": "DBInstanceIdentifier",
									"value": "mydbinstance12",
									"type": "text"
								},
								{
									"key": "Version",
									"value": "2014-10-31",
									"type": "text"
								},
								{
									"key": "SkipFinalSnapshot",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://rds.{{region}}.amazonaws.com/",
							"protocol": "https",
							"host": [
								"rds",
								"{{region}}",
								"amazonaws",
								"com"
							],
							"path": [
								""
							]
						}
					},
					"response": [
						{
							"name": "DB instance deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/databases/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"databases",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"description": "This folder provides endpoints for managing AWS RDS database instances. Use these requests to create, describe, modify, and delete RDS instances in your AWS account. Each request is pre-configured for AWS Signature Version 4 authentication and demonstrates the required parameters for database lifecycle management. Useful for automating database provisioning, updates, and cleanup."
		},
		{
			"name": "Storage (S3 buckets)",
			"item": [
				{
					"name": "Create S3 Bucket",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random bucket name",
									"function generateRandomBucketName() {",
									"    const prefix = 'bucket-';",
									"    const randomString = Math.random().toString(36).substring(2, 10);",
									"    return prefix + randomString;",
									"}",
									"",
									"const randomBucketName = generateRandomBucketName();",
									"",
									"// Set the random bucket name to the collection variable",
									"pm.collectionVariables.set('bucketName', randomBucketName);",
									"",
									"// Update the request URL to use the random bucket name",
									"const region = pm.collectionVariables.get('region') || pm.environment.get('region') || 'us-east-1';",
									"const newUrl = `https://s3.${region}.amazonaws.com/${randomBucketName}`;",
									"pm.request.url = newUrl;",
									"",
									"// The request will be sent with the updated URL automatically",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200 or 201', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test('Response does not contain common S3 error codes', function () {",
									"    var responseBody = pm.response.text();",
									"    var errorCodes = ['NoSuchBucket', 'BucketAlreadyExists', 'BucketNotEmpty', 'AccessDenied', 'InvalidBucketName'];",
									"    errorCodes.forEach(function(code) {",
									"        pm.expect(responseBody).to.not.include(code);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "service",
									"value": "s3",
									"type": "string"
								},
								{
									"key": "region",
									"value": "{{region}}",
									"type": "string"
								},
								{
									"key": "secretKey",
									"value": "{{vault:AWS-SECRET-KEY}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{vault:AWS-ACCESS-KEY}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Host",
								"value": "s3.{{region}}.amazonaws.com",
								"type": "text"
							},
							{
								"key": "x-amz-content-sha256",
								"value": "UNSIGNED-PAYLOAD",
								"type": "text"
							},
							{
								"key": "x-amz-date",
								"value": "{{aws-date}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://s3.{{region}}.amazonaws.com/{{bucketName}}",
							"protocol": "https",
							"host": [
								"s3",
								"{{region}}",
								"amazonaws",
								"com"
							],
							"path": [
								"{{bucketName}}"
							]
						}
					},
					"response": [
						{
							"name": "Bucket created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"my-bucket\",\n  \"region\": \"us-east-1\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/storage",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"storage"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"name\": \"my-bucket\",\n  \"region\": \"us-east-1\",\n  \"objects\": [\n    \"file1.txt\",\n    \"file2.jpg\"\n  ]\n}"
						}
					]
				},
				{
					"name": "List Objects in Bucket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200 or 201', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test('Response body contains the bucket name', function () {",
									"    var responseBody = pm.response.text();",
									"    var bucketName = pm.collectionVariables.get('bucketName');",
									"    pm.expect(responseBody).to.include(bucketName);",
									"});",
									"",
									"pm.test('Response does not contain common S3 error codes', function () {",
									"    var responseBody = pm.response.text();",
									"    var errorCodes = ['NoSuchBucket', 'BucketAlreadyExists', 'BucketNotEmpty', 'AccessDenied', 'InvalidBucketName'];",
									"    errorCodes.forEach(function(code) {",
									"        pm.expect(responseBody).to.not.include(code);",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://s3.{{region}}.amazonaws.com/{{bucketName}}?list-type=2",
							"protocol": "https",
							"host": [
								"s3",
								"{{region}}",
								"amazonaws",
								"com"
							],
							"path": [
								"{{bucketName}}"
							],
							"query": [
								{
									"key": "list-type",
									"value": "2"
								}
							]
						}
					},
					"response": [
						{
							"name": "Bucket details",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/storage/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"storage",
										":name"
									],
									"variable": [
										{
											"key": "name"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"name\": \"my-bucket\",\n  \"region\": \"us-east-1\",\n  \"objects\": [\n    \"file1.txt\",\n    \"file2.jpg\"\n  ]\n}"
						}
					]
				},
				{
					"name": "List All Objects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has XML content type\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"xml\");",
									"});",
									"",
									"pm.test(\"Response body contains expected XML structure for listing S3 buckets\", function () {",
									"    var jsonObject = xml2Json(pm.response.text());",
									"    pm.expect(jsonObject).to.have.property(\"ListAllMyBucketsResult\");",
									"    pm.expect(jsonObject.ListAllMyBucketsResult).to.have.property(\"Buckets\");",
									"    pm.expect(jsonObject.ListAllMyBucketsResult.Buckets).to.have.property(\"Bucket\");",
									"    var buckets = jsonObject.ListAllMyBucketsResult.Buckets.Bucket;",
									"    pm.expect(buckets).to.be.an(\"array\");",
									"    buckets.forEach(function(bucket) {",
									"        pm.expect(bucket).to.have.property(\"Name\");",
									"        pm.expect(bucket).to.have.property(\"CreationDate\");",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://s3.{{region}}.amazonaws.com/",
							"protocol": "https",
							"host": [
								"s3",
								"{{region}}",
								"amazonaws",
								"com"
							],
							"path": [
								""
							]
						}
					},
					"response": [
						{
							"name": "Bucket details",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/storage/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"storage",
										":name"
									],
									"variable": [
										{
											"key": "name"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"name\": \"my-bucket\",\n  \"region\": \"us-east-1\",\n  \"objects\": [\n    \"file1.txt\",\n    \"file2.jpg\"\n  ]\n}"
						}
					]
				},
				{
					"name": "Delete Bucket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code is 200 or 201', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test('Response does not contain common S3 error codes', function () {",
									"    var responseBody = pm.response.text();",
									"    var errorCodes = ['NoSuchBucket', 'BucketAlreadyExists', 'BucketNotEmpty', 'AccessDenied', 'InvalidBucketName'];",
									"    errorCodes.forEach(function(code) {",
									"        pm.expect(responseBody).to.not.include(code);",
									"    });",
									"});",
									"",
									"pm.test('Extract and validate bucket name from XML response', function () {",
									"    var responseBody = pm.response.text();",
									"    var jsonObject = xml2Json(responseBody);",
									"    var bucketNameFromResponse = jsonObject.ListBucketResult && jsonObject.ListBucketResult.Name;",
									"    pm.console.log('Extracted bucket name:', bucketNameFromResponse);",
									"    var expectedBucketName = pm.collectionVariables.get('bucketName');",
									"    pm.expect(bucketNameFromResponse, 'Bucket name extracted from response').to.exist;",
									"    pm.expect(bucketNameFromResponse).to.eql(expectedBucketName);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://s3.{{region}}.amazonaws.com/{{bucketName}}",
							"protocol": "https",
							"host": [
								"s3",
								"{{region}}",
								"amazonaws",
								"com"
							],
							"path": [
								"{{bucketName}}"
							]
						}
					},
					"response": [
						{
							"name": "Bucket deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/storage/:name",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"storage",
										":name"
									],
									"variable": [
										{
											"key": "name"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"description": "This folder contains endpoints for managing AWS S3 storage buckets and objects. Use these requests to create, list, and delete S3 buckets, as well as to list and manage objects within a bucket. All requests use AWS Signature Version 4 authentication. Ideal for automating storage provisioning, data management, and cleanup tasks in your AWS environment."
		},
		{
			"name": "Networking (VPC + Subnets)",
			"item": [
				{
					"name": "Create VPC",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cidr\": \"10.0.0.0/16\",\n  \"name\": \"my-vpc\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://ec2.{{region}}.amazonaws.com/?Action=CreateVpc&Version=2016-11-15&CidrBlock=10.0.0.0/16",
							"protocol": "https",
							"host": [
								"ec2",
								"{{region}}",
								"amazonaws",
								"com"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "Action",
									"value": "CreateVpc"
								},
								{
									"key": "Version",
									"value": "2016-11-15"
								},
								{
									"key": "CidrBlock",
									"value": "10.0.0.0/16"
								}
							]
						}
					},
					"response": [
						{
							"name": "VPC created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"cidr\": \"10.0.0.0/16\",\n  \"name\": \"my-vpc\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/networking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"networking"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"vpcId\": \"vpc-12345678\",\n  \"cidr\": \"10.0.0.0/16\",\n  \"name\": \"my-vpc\",\n  \"state\": \"available\"\n}"
						}
					]
				},
				{
					"name": "Describe VPC",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/networking/:id?Action=DescribeVpcs&Version=2016-11-15&VpcId={{vpc_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"networking",
								":id"
							],
							"query": [
								{
									"key": "Action",
									"value": "DescribeVpcs"
								},
								{
									"key": "Version",
									"value": "2016-11-15"
								},
								{
									"key": "VpcId",
									"value": "{{vpc_id}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "string",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "VPC details",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/networking/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"networking",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"vpcId\": \"vpc-12345678\",\n  \"cidr\": \"10.0.0.0/16\",\n  \"name\": \"my-vpc\",\n  \"state\": \"available\"\n}"
						}
					]
				},
				{
					"name": "Modify VPC attributes",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "Action",
									"value": "ModifyVpcAttribute",
									"type": "text"
								},
								{
									"key": "Version",
									"value": "2016-11-15",
									"type": "text"
								},
								{
									"key": "VpcId",
									"value": "{{vpc_id}}",
									"type": "text"
								},
								{
									"key": "EnableDnsSupport.Value",
									"value": "false",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://ec2.{{region}}.amazonaws.com/?Action=ModifyVpcAttribute&Version=2016-11-15&VpcId={{vpc_id}}&EnableDnsSupport.Value=false",
							"protocol": "https",
							"host": [
								"ec2",
								"{{region}}",
								"amazonaws",
								"com"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "Action",
									"value": "ModifyVpcAttribute"
								},
								{
									"key": "Version",
									"value": "2016-11-15"
								},
								{
									"key": "VpcId",
									"value": "{{vpc_id}}"
								},
								{
									"key": "EnableDnsSupport.Value",
									"value": "false"
								}
							]
						}
					},
					"response": [
						{
							"name": "VPC modified",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"attribute\": \"enableDnsSupport\",\n  \"value\": true\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/networking/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"networking",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Delete VPC",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/networking/:id?Action=DeleteVpc&Version=2016-11-15&VpcId={{vpc_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"networking",
								":id"
							],
							"query": [
								{
									"key": "Action",
									"value": "DeleteVpc"
								},
								{
									"key": "Version",
									"value": "2016-11-15"
								},
								{
									"key": "VpcId",
									"value": "{{vpc_id}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "string",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "VPC deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/networking/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"networking",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"description": "This folder contains endpoints for managing AWS VPCs and networking components, including subnets and VPC attributes. Use these requests to create, describe, modify, and delete VPCs and related networking resources. All requests are configured for AWS Signature Version 4 authentication. Useful for automating network provisioning, configuration, and cleanup in your AWS environment."
		}
	],
	"auth": {
		"type": "awsv4",
		"awsv4": [
			{
				"key": "service",
				"value": "s3",
				"type": "string"
			},
			{
				"key": "region",
				"value": "{{region}}",
				"type": "string"
			},
			{
				"key": "secretKey",
				"value": "{{vault:AWS-SECRET-KEY}}",
				"type": "string"
			},
			{
				"key": "accessKey",
				"value": "{{vault:AWS-ACCESS-KEY}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// --- General Status Code Test ---",
					"pm.test(\"Status code is 2xx or 4xx/5xx as expected\", function () {",
					"    pm.expect([200,201,202,204,400,401,403,404,409,422,500,502,503,504]).to.include(pm.response.code);",
					"});",
					"",
					"// --- Content-Type Header Test ---",
					"pm.test(\"Content-Type is application/json\", function () {",
					"    pm.response.to.have.header(\"Content-Type\");",
					"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
					"});",
					"",
					"// --- Response Body Structure Test (for JSON) ---",
					"if (pm.response.headers.get(\"Content-Type\") && pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
					"    let jsonData;",
					"    try {",
					"        jsonData = pm.response.json();",
					"    } catch (e) {",
					"        jsonData = null;",
					"    }",
					"    pm.test(\"Response body is valid JSON\", function () {",
					"        pm.expect(jsonData).to.not.be.undefined;",
					"    });",
					"    // Example: Check for common fields (customize per endpoint as needed)",
					"    if (pm.response.code >= 200 && pm.response.code < 300) {",
					"        pm.test(\"Response contains expected fields for success\", function () {",
					"            pm.expect(Object.keys(jsonData).length).to.be.above(0);",
					"        });",
					"    } else if (pm.response.code >= 400) {",
					"        pm.test(\"Error response contains message or error field\", function () {",
					"            pm.expect(jsonData).to.have.any.keys(\"error\", \"message\");",
					"        });",
					"    }",
					"}",
					"",
					"// --- Empty Body for 204 ---",
					"pm.test(\"No content for 204 responses\", function () {",
					"    if (pm.response.code === 204) {",
					"        pm.expect(pm.response.text()).to.eql(\"\");",
					"    }",
					"});",
					"",
					"// --- Error Handling Test ---",
					"pm.test(\"Error responses have appropriate status codes\", function () {",
					"    if (pm.response.code >= 400) {",
					"        pm.expect([400,401,403,404,409,422,500,502,503,504]).to.include(pm.response.code);",
					"    }",
					"});",
					"",
					"// --- Required Field Checks (customize per endpoint) ---",
					"// For demonstration, checks for 'id' and 'name' fields if present",
					"if (pm.response.headers.get(\"Content-Type\") && pm.response.headers.get(\"Content-Type\").includes(\"application/json\")) {",
					"    let jsonData;",
					"    try {",
					"        jsonData = pm.response.json();",
					"    } catch (e) {",
					"        jsonData = null;",
					"    }",
					"    if (jsonData && typeof jsonData === 'object' && !Array.isArray(jsonData)) {",
					"        pm.test(\"Response contains 'id' and 'name' fields if applicable\", function () {",
					"            if (jsonData.id !== undefined && jsonData.name !== undefined) {",
					"                pm.expect(jsonData).to.have.property(\"id\");",
					"                pm.expect(jsonData).to.have.property(\"name\");",
					"            }",
					"        });",
					"    }",
					"}",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.example.com"
		},
		{
			"key": "region",
			"value": "us-east-1"
		},
		{
			"key": "bucketName",
			"value": "",
			"type": "default"
		}
	]
}